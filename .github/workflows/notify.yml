name: SKIMA watcher
on:
  workflow_dispatch:

permissions:
  actions: write        # ← キャッシュ削除に必須
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    concurrency:
      group: skima-watch
      cancel-in-progress: false

    steps:
    # 1) コード & Python セットアップ -------------------------
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - run: pip install requests beautifulsoup4

    # 2) cache 復元（read-only） ------------------------------
    - id: restore
      uses: actions/cache/restore@v4
      with:
        path: .cache
        key: dummy
        restore-keys: skima-watch-cache-

    # 3) 差分検知 & 通知 --------------------------------------
    - run: python skima_watch.py
      env:
        IFTTT_KEY: ${{ secrets.IFTTT_KEY }}

    # 4) 新しいキーを作って保存 -------------------------------
    - id: hash
      run: |
        HASH=$(sha256sum .cache/items.db | cut -d' ' -f1)
        TS=$(date -u '+%Y%m%d%H%M%S')
        echo "key=skima-watch-cache-${TS}-${HASH}" >> $GITHUB_OUTPUT

    - name: save-cache
      uses: actions/cache/save@v4
      with:
        path: .cache
        key: ${{ steps.hash.outputs.key }}

    # 5) 最新キー“以外”を削除 -------------------------------
    - name: prune-old-caches
      uses: actions/github-script@v7
      with:
        script: |
          const owner = context.repo.owner;
          const repo  = context.repo.repo;
          const keepKey = '${{ steps.hash.outputs.key }}';      // 今回保存したキー

          let page = 1, removed = 0;
          for (;;) {
            const { data } = await github.request(
              'GET /repos/{owner}/{repo}/actions/caches',
              { owner, repo, per_page: 100, page }
            );
            if (!data.actions_caches.length) break;

            for (const c of data.actions_caches) {
              if (c.key !== keepKey && c.key.startsWith('skima-watch-cache-')) {
                await github.request(
                  'DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}',
                  { owner, repo, cache_id: c.id }
                );
                core.info(`🗑️  ${c.key} deleted`);
                removed++;
              }
            }
            page++;
          }
          core.summary.addHeading('Cache pruning complete')
                       .addRaw(`Removed **${removed}** old cache(s)`).write();
